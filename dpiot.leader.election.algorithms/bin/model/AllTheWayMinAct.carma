
record ToForward = [int ID, /*real SEED,*/ int COUNT];//confronto viene effettuato fra SEED e, in caso di uguaglianza, fra ID

fun list<ToForward> removeFirstElement(list<ToForward> pending){
	list<ToForward> result = newList(ToForward);
	if (size(pending) == 1){
		return result;
	}
	for i from 1 to size(pending){
		result = result + [:pending[i]:];
	}
	return result;
}

fun ToForward addElement(int id, int counter){
	ToForward result := [ID := id,COUNT := counter];
	return result;
}

const NODEZ = 50;


component Agent(int zone, real seed){
	store{
		attrib int id = zone;
		attrib real seed = seed;
		attrib int sizy = 1;
		attrib zone := zone;
		attrib right := (zone+1)%NODEZ;
		attrib left := (zone+NODEZ-1)%NODEZ;
		attrib list<ToForward> pending = newList(ToForward);
		attrib int leader = MAXINT;
		attrib bool known = false;
		attrib bool done = false;
		
	}
	behaviour{
		IDLE = 
			send[my.right == zone]<my.id,my.seed, 1>{
				my.leader = my.id;
			}.ACTIVE
			
			+
			
			send[my.left == zone](anId,aSeed,aCounter){
				pending = pending +[:addElement(anId,aCounter):];
			}.FOLLOWER;
		
		
		ACTIVE =
		
			send[my.left == zone](anId,aCounter){
				pending = pending +[:addElement(anId,aCounter):];
			}.ACTIVE
			
			+
			
			[(size(my.pending) > 0) && (pending[0].ID == my.id)]check*{
				my.known = true;
			}.CHECK
			
			+
			
			[(size(my.pending) > 0) && (pending[0].ID != my.id) && known]check*{}.CHECK
			
			+
			
			[(size(my.pending) > 0) && (pending[0].ID != my.id)]send[my.right == zone]<pending[0].ID,(pending[0].COUNT+1)>{
				my.leader = min(pending[0].ID,my.leader);
				my.sizy = my.sizy+1;
				pending = removeFirstElement(pending);
			}.ACTIVE;
		
		
		CHECK = 
			
			[my.sizy == my.pending[0].COUNT && my.leader == my.id]becomeLeader*{
				pending = removeFirstElement(pending);
			}.LEADER
			
			+
			
			[my.sizy == my.pending[0].COUNT && my.leader != my.id]becomeFollower*{
				pending = removeFirstElement(pending);
			}.FOLLOWER
			
			+
			
			[my.sizy != my.pending[0].COUNT]becomeFeederz*{}.ACTIVE
			
			+
			
			send[my.left == zone](anId,aCounter){
				pending = pending +[:addElement(anId,aCounter):];
			}.CHECK;
			
			
		LEADER = 
		
			[!done]send[my.right == zone]<my.id,1>{
				done = true;
			}.LEADER
			
			+
			
			[done]send[my.left == zone](anId,aCounter){
				my.sizy = aCounter;
			}.LEADER;
		
		FOLLOWER =
			
			[size(my.pending) > 0 && pending[0].ID == my.leader]send<pending[0].ID,pending[0].COUNT+1>{
				pending = removeFirstElement(pending);
			}.FOLLOWER
			
			+
		
			send[my.left == zone](anId,aCounter){
				pending = pending +[:addElement(anId,aCounter):];
			}.FOLLOWER
			
			+
			
			[(size(my.pending) > 0) && (pending[0].ID != my.id) && (pending[0].ID != my.leader)]send[my.right == zone]<pending[0].ID,(pending[0].COUNT)>{
				my.leader = min(pending[0].ID,my.leader);
				pending = removeFirstElement(pending);
			}.FOLLOWER;
		
	}
	init{
		IDLE
	}
}




system AllTheWayInRing {	
	collective {
		for (i ; i < NODEZ ; 1) {
			new Agent(i,RND);
		}
	}	
	environment {
		store {
			attrib int messages = 0;
			}
		update {
			send{
				messages = global.messages+1;
			}
		}
	}
}

measure leader = #{Agent[LEADER] | my.sizy == NODEZ};
measure followerz = #{Agent[FOLLOWER] | true};
measure messages = global.messages;
measure idlez = #{Agent[IDLE] | true};
measure activez = #{Agent[ACTIVE] | true};
measure checkz = #{Agent[CHECK] | true};

