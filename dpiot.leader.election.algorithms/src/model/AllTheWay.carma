
record Message = [int ID, real SEED, int COUNT];

fun list<Message> removeFirstElement(list<Message> pending){
	list<Message> result = newList(Message);
	if (size(pending) == 1){
		return result;
	}
	for i from 1 to size(pending){
		result = result + [:pending[i]:];
	}
	return result;
}

fun Message addElement(int id, real seed, int counter){
	Message result := [ID := id, SEED := seed, COUNT := counter];
	return result;
}

const NODEZ = 50;

component Agent(int zone, real myseed){
	store{
		attrib int id = zone;
		attrib real seed = myseed;
		attrib int sizy = 1;
		attrib zone := zone;
		attrib right := (zone+1)%NODEZ;
		attrib left := (zone+NODEZ-1)%NODEZ;
		attrib list<Message> pending = newList(Message);
		attrib int leader = MAXINT;
		attrib bool known = false;
		
	}
	behaviour{
		IDLE = 
			send[my.right == zone]<my.id,my.seed,my.sizy>{
				my.leader = my.id;
			}.ACTIVE
			
			+
			
			send[my.left == zone](anId,aSeed,aCounter){
				pending = pending +[:addElement(anId,aSeed,aCounter):];
			}.GO4LEADER;
		
		
		ACTIVE =
		
		send[my.left == zone](anId,aSeed,aCounter){
			pending = pending +[:addElement(anId,aSeed,aCounter):];
		}.ACTIVE
		
		+
		
		[(size(my.pending) > 0) && (pending[0].ID == my.id)]check*{
			my.known = true;
		}.CHECK
		
		+
		
		[size(my.pending) > 0 && (pending[0].ID != my.id) && known]check*{}.CHECK
		
		+
		
		[(size(my.pending) > 0) && (pending[0].SEED < my.seed) && !known]send[my.right == zone]<pending[0].ID,pending[0].SEED,(pending[0].COUNT+1)>{
			
			my.leader = pending[0].ID;
			my.sizy = my.sizy+1;
			pending = removeFirstElement(pending);
		}.ACTIVE
		
		+
		
		[(size(my.pending) > 0) && (pending[0].SEED == my.seed) && (pending[0].ID != my.id)]send[my.right == zone]<pending[0].ID,pending[0].SEED,(pending[0].COUNT+1)>{
			my.leader = min(pending[0].ID,my.leader);
			my.sizy = my.sizy+1;
			pending = removeFirstElement(pending);
		}.ACTIVE
		
		+
		
		[(size(my.pending) > 0) && (pending[0].SEED > my.seed)]send[my.right == zone]<pending[0].ID,pending[0].SEED,(pending[0].COUNT+1)>{
			my.sizy = my.sizy+1;
			pending = removeFirstElement(pending);
		}.ACTIVE;
		
		CHECK = 
			[my.sizy == my.pending[0].COUNT && my.leader == my.id]becomeLeader*{
				pending = removeFirstElement(pending);
			}.LEADER
			
			+
			
			[my.sizy == my.pending[0].COUNT && my.leader != my.id]becomeFollower*{
				pending = removeFirstElement(pending);
			}.FOLLOWER
			
			+
			
			[my.sizy != my.pending[0].COUNT]becomeFeederz*{}.ACTIVE
			+
			
		send[my.left == zone](anId,aSeed,aCounter){
			pending = pending +[:addElement(anId,aSeed,aCounter):];
		}.CHECK;
			
			
		LEADER = 

			beLeader*{}.LEADER;
		
		FOLLOWER =
		
			beFollower*{}.FOLLOWER;	

		GO4LEADER = 
			send[my.left == zone](anId, aSeed, aCounter){
				pending = pending +[:addElement(anId,aSeed,aCounter):];
			}.GO4LEADER
			+
			send[my.right == zone]<my.id,my.seed,my.sizy>{
				my.leader = my.id;
			}.ACTIVE;
	}
	init{
		IDLE
	}
}




system LeaderElectionInRing {	
	collective {
		for (i ; i < NODEZ ; 1) {
			new Agent(i,RND);
		}
	}	
	environment {
		store {
			attrib int messages = 0;
			}
		update {
			send{
				messages = global.messages+1;
			}
		}
	}
}

measure leader = #{Agent[LEADER] | true};
measure followerz = #{Agent[FOLLOWER] | true};
measure messages = global.messages;
measure idlez = #{Agent[IDLE] | true};
measure activez = #{Agent[ACTIVE] | true};
measure checkz = #{Agent[CHECK] | true};

