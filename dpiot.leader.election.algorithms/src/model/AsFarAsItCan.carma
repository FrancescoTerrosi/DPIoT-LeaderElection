
enum MessageType = NULL,ELECTION, NOTIFY;

record Message = [MessageType MESSAGE,int ID, real SEED];

fun list<Message> removeFirstElement(list<Message> pending){
	list<Message> result = newList(Message);
	if (size(pending) == 1){
		return result;
	}
	for i from 1 to size(pending){
		result = result + [:pending[i]:];
	}
	return result;
}

fun Message createElement(MessageType message, int id, real seed){
	Message result := [MESSAGE := message, ID = id, SEED := seed];
	return result;
}

fun list<Message> addMessage(list<Message> listy, Message message){
	listy = listy + [:message:];
	return listy;
}
const NODEZ = 50;


component Agent(int zone, real seed){
	store{
		attrib int id = zone;
		attrib real seed = seed;
		attrib zone := zone;
		attrib right := (zone+1)%NODEZ;
		attrib left := (zone+NODEZ-1)%NODEZ;
		attrib list<Message> pending = newList(Message);
		attrib Message toForward := [MESSAGE := NULL, ID := -1, SEED := -1.0];
		attrib int leader = id;
		attrib bool leaderBool = false;
		attrib real leaderSeed = seed;
		attrib bool known = false;
		attrib bool done = false;
		attrib bool candidated = false;
		
	}
	behaviour{
		
		IDLE = 
			send[my.right == zone]<ELECTION,my.id,my.seed>{
				candidated = true;
			}.ACTIVE
			
			+
			
			send[my.left == zone](messageType,anId,aSeed){
				toForward = createElement(messageType,anId,aSeed);
				pending = addMessage(pending,toForward);
			}.SENDELECTION;
		
		ACTIVE = 
			
			send[my.left == zone](messageType,anId,aSeed){
				toForward = createElement(messageType,anId,aSeed);
				pending = addMessage(pending,toForward);
			}.ACTIVE
			
			+
		
			[
				size(pending) > 0 &&
				pending[0].MESSAGE == ELECTION && 
				my.leaderSeed > pending[0].SEED
			]
			send[my.right == zone]<pending[0].MESSAGE,pending[0].ID,pending[0].SEED>{
				my.leaderSeed = pending[0].SEED;
				pending = removeFirstElement(pending);
			}.ACTIVE

			+

			[
				size(pending) > 0 &&
				pending[0].MESSAGE == ELECTION && 
				my.leaderSeed == pending[0].SEED && 
				my.id > pending[0].ID
			]
			send[my.right == zone]<pending[0].MESSAGE,pending[0].ID,pending[0].SEED>{
				my.leaderSeed = pending[0].SEED;
				pending = removeFirstElement(pending);
			}.ACTIVE
			
			+
			
			[
				size(pending) > 0 &&
				pending[0].MESSAGE == ELECTION &&
				my.leaderSeed < pending[0].SEED
			]
			removeElement*{
				pending = removeFirstElement(pending);
			}.ACTIVE

			+
			
			[
				size(pending) > 0 &&
				pending[0].MESSAGE == ELECTION &&
				my.leaderSeed == pending[0].SEED &&
				my.id < pending[0].ID
			]
			removeElement*{
				pending = removeFirstElement(pending);
			}.ACTIVE
			
			+
			
			[
				size(pending) > 0 &&
				pending[0].MESSAGE == ELECTION &&
				my.id == pending[0].ID
			]
			send[my.right == zone]<NOTIFY,my.id,my.seed>{
				my.leaderBool = true;
				pending = removeFirstElement(pending);
			}.LEADER
			
			+
			
			[
				size(pending) > 0 &&
				pending[0].MESSAGE == NOTIFY
			]
			send[my.right == zone]<pending[0].MESSAGE,pending[0].ID,pending[0].SEED>{
				pending = removeFirstElement(pending);
			}.FOLLOWER;
			
		FOLLOWER =
		
			send[my.left == zone](messageType,anId,aSeed){
				
			}.FOLLOWER
			
			+
		
			beFollower*{}.FOLLOWER;
		
		LEADER =
		
		
			send[my.left == zone](messageType,anId,aSeed){
				
			}.LEADER;
		
		SENDELECTION =
		
			send[my.left == zone](messageType,anId,aSeed){
				toForward = createElement(messageType,anId,aSeed);
				pending = addMessage(pending,toForward);
			}.SENDELECTION
			
			+
		
			[pending[0].SEED > my.seed]send[my.right == zone]<ELECTION,my.id,my.seed>{
				candidated = true;
			}.ACTIVE
			
			+
			
			[pending[0].SEED == my.seed && pending[0].ID > my.id]send[my.right == zone]<ELECTION,my.id,my.seed>{
				candidated = true;
			}.ACTIVE
			
			+
			
			[pending[0].SEED < my.seed]send[my.right == zone]<pending[0].MESSAGE,pending[0].ID,pending[0].SEED>{
				pending = removeFirstElement(pending);
			}.ACTIVE
			
			+
			
			[pending[0].SEED == my.seed && pending[0].ID < my.id]send[my.right == zone]<pending[0].MESSAGE,pending[0].ID,pending[0].SEED>{
				pending = removeFirstElement(pending);
			}.ACTIVE;
		}
	init{
		IDLE
	}
}




system LeaderElectionInRing {	
	collective {
		for (i ; i < NODEZ ; 1) {
			new Agent(i,RND);
		}
	}	
	environment {
		store {
			attrib int messages = 0;
			}
		update {
			send{
				messages = global.messages+1;
			}
		}
	}
}

measure leader = #{Agent[LEADER] | true};
measure followerz = #{Agent[FOLLOWER] | true};
measure messages = global.messages;
measure idlez = #{Agent[IDLE] | true};
measure activez = #{Agent[ACTIVE] | true};
measure candidating = #{Agent[SENDELECTION] | true};
measure candidated = #{ * | my.candidated == true};

measure leaderBoolean = min{ my.seed |  my.leaderBool == true};
measure minseed = min{ my.seed };

